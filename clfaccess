#!/usr/bin/env python2
from __future__ import division
import sys
import re
import argparse

def parse_args():
    parser = argparse.ArgumentParser(
            description='Colorize accesslogs from stdin.\
            Example: tail -f log | %(prog)s')
    parser.add_argument('--user-agent', dest='user_agent',
            action='store_true', default=False, help='Display user-agent.')
    parser.add_argument('--referrer', action='store_true', default=False,
            help='Display referrer.')
    parser.add_argument('--time', action='store_true', default=False,
            help='Show timestamp.')
    
    return parser


def human_size(size):
    for x in ['B','KB','MB','GB','TB']:
        if size < 1024.0:
            return '{:3.1f}{}'.format(size, x)
        size /= 1024.0


def term_color(num, s):
    return '\033[38;5;{}m{}\033[0m'.format(num, s)


def run(parser):
    if sys.stdin.isatty():
        parser.print_help()
        quit()
    args = parser.parse_args()
    method_colors = {
            'GET': lambda x: term_color(213, x),
            'POST': lambda x: term_color(203, x)
            }
    e = '(.+?)'
    r = re.compile('{0} - {0} \[{0}:{0} {0}\] "(?:(?:{0} {0} {0})|(-))" {0} {0} "{0}" "{0}"'.format(e))
    
    while True:
        ret = ''
        s = sys.stdin.readline()
        if not s:
            break
        m = r.match(s)
        if not m:
            continue
        else:
            ip = m.group(1)
            remote_user = m.group(2)
            date = m.group(3)
            time = m.group(4)
            utc = m.group(5)
            http_method = m.group(6)
            uri = m.group(7)
            empty = m.group(8)
            protocol = m.group(9)
            status_code = m.group(10)
            size = {'bytes': int(m.group(11)), 'human': human_size(int(m.group(11)))}
            referrer = m.group(12)
            user_agent = m.group(13)
        
        if size['bytes'] > 10*1024*1024:
            size['human'] = term_color(160, size['human'])
        elif size['bytes'] > 10*1024:
            size['human'] = term_color(172, size['human'])
        else:
            size['human'] = term_color(231, size['human'])

        if http_method is not None:
            http_method = method_colors.get(http_method, lambda x: term_color(45, x))(http_method)
        ip = ip[7:] if ip.startswith('::ffff:') else ip

        if status_code.startswith('2'):
            status_code = term_color(76, status_code)
        elif status_code.startswith('4'):
            status_code = term_color(214, status_code)
        elif status_code.startswith('5'):
            status_code = term_color(196, status_code)
        else:
            status_code = term_color(231, status_code)

        if args.time:
            ret += '{} '.format(time)
        ret += '{:<20}\t - {} [{:>15}] {:>23} {:<15}'.format(
                http_method if http_method is not None \
                else term_color(45, '-'),
                status_code, ip, size['human'],
                uri if uri is not None else '-')

        if args.referrer:
            ret += ' {} {}'.format(term_color(21, '|'), referrer)
        if args.user_agent:
            ret += ' {} {}'.format(term_color(21, '|'), user_agent)
        print ret

if __name__ == '__main__':
    parser = parse_args()
    run(parser)
