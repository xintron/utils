#!/usr/bin/env python2
# Copyright (c) 2011, Marcus Carlsson <carlsson.marcus@gmail.com>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# 
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of the author nor the names of other
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os, sys
import argparse
import ConfigParser
import subprocess

def parse_args():
    defaults= {
        'filename': '%s.png',
        'select': False,
        'port': 22,
        'base_dir': './'
    }
    if os.path.isfile(os.getenv('HOME')+'/.pyscrotrc'):
        defaults['conf_file'] = os.getenv('HOME')+'/.pyscrotrc'
        
    conf_parser = argparse.ArgumentParser(add_help=False)
    conf_parser.add_argument('--conf-file', '-c', help='Specify config file.',
            metavar='FILE', dest='conf_file',
            default=defaults.get('conf_file'))
    args, remaining_argv = conf_parser.parse_known_args()

    if args.conf_file:
        config = ConfigParser.SafeConfigParser()
        config.read([args.conf_file])
        if config.has_section('Defaults'):
            defaults = dict(defaults.items() + config.items("Defaults"))

    parser = argparse.ArgumentParser(
            parents=[conf_parser],
            formatter_class=argparse.RawDescriptionHelpFormatter,
            description='Take scrot and send to remote server.\
            Return URL to the image.')
    parser.set_defaults(**defaults)
    parser.add_argument('--filename', '-f', help='Filename.\
            See `man scrot` for more info. (default: %(default)s)',
            metavar='FILENAME')
    parser.add_argument('--select', '-s', action='store_true',
            help='Select area to scrot.')
    parser.add_argument('--username', '-u', help='Remote username.')
    parser.add_argument('--host', '-H', help='Remote hostname or IP.')
    parser.add_argument('--port', '-p', type=int, help='Remote port.')
    parser.add_argument('--base-url', help='Remote base-url for creating \
            HTTP-URL\'s', dest='base_url')
    parser.add_argument('--base-dir', help='Remote base-dir for uploading \
            new scrots.', dest='base_dir')
    parser.add_argument('dir', metavar='directory', nargs='?',
            help='Remote directory. Will be created if needed.')

    args = parser.parse_args(remaining_argv)

    if not args.host:
        print 'Host is required.'
        sys.exit(2)
    if not args.base_dir.endswith('/'):
        if len(args.base_dir) == 0:
            args.base_dir = './'
        else:
            args.base_dir = args.base_dir+'/'
    if args.base_url and not args.base_url.endswith('/'):
        args.base_url = args.base_url+'/'
    if args.dir and not args.dir.endswith('/'):
        args.dir = args.dir+'/'

    return args


def run():

    args = parse_args()
    s = ['scrot', '-e', 'echo $f']
    if args.select:
        s.append('-s')
    s.append(args.filename)
    proc = subprocess.Popen(s, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    filename, stderr = proc.communicate()
    filename = filename.rstrip()

    base_dir = args.base_dir
    base_url = args.base_url
    if args.dir:
        base_dir += args.dir
        base_url += args.dir

    host = []
    if args.username:
        host.append('{}@{}'.format(args.username, args.host))
    else:
        host.append(args.host)

    scp = ['scp', '-q']
    ssh = ['ssh']
    if args.port and args.port != 22:
        ssh.append('-p {}'.format(args.port))
        scp.append('-P {}'.format(args.port))

    if args.dir:
        ssh.extend(host)
        ssh.append('mkdir -p {}'.format(base_dir))

        assert subprocess.call(ssh) == 0
    
    scp.append(filename)
    scp.append('{}:{}'.format(''.join(host), base_dir))

    assert subprocess.call(scp) == 0

    os.unlink(filename)

    if args.base_url:
        print '{}{}'.format(base_url, filename)
    else:
        print '{} was successfully uploaded.'.format(filename)
    exit()

if __name__ == '__main__':
    run()
