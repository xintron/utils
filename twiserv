#!/usr/bin/env python2
# Copyright (c) 2012, Marcus Carlsson <carlsson.marcus@gmail.com>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Marcus Carlsson nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
__version__ = '0.1.0'
import sys
import os
import argparse
import urllib
import cgi
import logging

from twisted.python import log
from twisted.web.server import Site
from twisted.web.static import File, DirectoryLister, getTypeAndEncoding,\
        loadMimeTypes
from twisted.internet import reactor

content_types = {
        '.mkv': 'video/x-matroska',
        '.nfo': 'text/plain',
        '.cr2': 'image/x-raw'
        }
content_icons = {
        'directory': 'icon-folder-close',
        'video': 'icon-film',
        'audio': 'icon-music',
        'image': 'icon-picture',
        'default': 'icon-file'
        }

def human_size(num):
    for x in ['B','K','M','G','T', 'P', 'E', 'Z', 'Y']:
        if num < 1024.0:
            return '{:3.1f}{:s}'.format(num, x)
        num /= 1024.0

class DirLister(DirectoryLister):

    template = """<!DOCTYPE html>
<html>
<header>
    <link
    href="//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css"
    rel="stylesheet">
    <style type="text/css">
        table .right { text-align: right; }
    </style>
    <title>%(header)s</title>
</header>
<body>
    <div class="container">
        <h1>%(header)s</h1>
        <table class="table table-hover table-striped table-condensed">
            <thead>
                <th>Filename</th>
                <th style="width: 5%%;">Size</th>
                <th>Content type</th>
            </thead>
            <tbody>
                %(tableContent)s
            </tbody>
        </table>
    </div>
</body>
</html>"""

    linePattern = """<tr>
    <td><a href="%(href)s">%(text)s</a></td>
    <td class="right">%(size)s</td>
    <td>%(type)s</td>
</tr>"""

    def _buildTableContent(self, elements):
        tableContent = []
        for element in elements:
            t = element['type'][1:len(element['type'])-1]
            icon = False
            for i in content_icons.iterkeys():
                if t.startswith(i):
                    element['text'] = '<i class="%s"></i> %s' \
                        % (content_icons[i], element['text'])
                    icon = True
            if not icon:
                element['text'] = '<i class="%s"></i> %s' \
                    % (content_icons['default'], element['text'])
            tableContent.append(self.linePattern % element)
        return tableContent

    def _getFilesAndDirectories(self, directory):
        files = []
        dirs = []
        for path in directory:
            if do_hide and path.startswith('.'):
                continue
            url = urllib.quote(path, "/")
            escapedPath = cgi.escape(path)
            if os.path.isdir(os.path.join(self.path, path)):
                url = url + '/'
                dirs.append({'text': escapedPath + "/", 'href': url,
                             'size': '', 'type': '[directory]',
                             'encoding': ''})
            else:
                mimetype, encoding = getTypeAndEncoding(path, self.contentTypes,
                                                        self.contentEncodings,
                                                        self.defaultType)
                try:
                    size = os.stat(os.path.join(self.path, path)).st_size
                except OSError:
                    continue
                files.append({
                    'text': escapedPath, "href": url,
                    'type': '[%s]' % mimetype,
                    'encoding': (encoding and '[%s]' % encoding or ''),
                    'size': human_size(size)})
        return dirs, files

class FileHandler(File):

    contentTypes = loadMimeTypes()
    contentTypes.update(content_types)

    def directoryListing(self):
        if do_hide and os.path.basename(os.path.abspath(self.path)).startswith('.'):
            return self.childNotFound
        return DirLister(self.path, self.listNames(), self.contentTypes,
                self.contentEncodings, self.defaultType)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-b', '--bind', default='0.0.0.0',
            help='Address to bind to. Empty means all addresses')
    parser.add_argument('-p', '--port', type=int)
    parser.add_argument('--hide', action='store_true', default=False,
            help='Don\'t show hidden files and directories.')
    parser.add_argument('path', nargs='?', default='.')
    args = parser.parse_args()

    if args.port:
        port = args.port
    else:
        port = 8080

    global do_hide
    do_hide = args.hide
    resource = FileHandler(args.path)
    factory = Site(resource)
    logger.info('Serving HTTP on: {}:{}'.format(args.bind, port))
    reactor.listenTCP(port, factory, interface=args.bind)
    try:
        reactor.run()
    except KeyboardInterrupt:
        reactor.stop()
        sys.exit(0)

logger = None
do_hide = False
if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG,
            format='%(asctime)s [%(levelname)s] %(name)s - %(message)s')
    logger = logging.getLogger()
    observer = log.PythonLoggingObserver()
    observer.start()
    main()
